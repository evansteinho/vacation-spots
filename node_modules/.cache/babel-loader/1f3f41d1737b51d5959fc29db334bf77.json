{"ast":null,"code":"import _toConsumableArray from\"/Users/evansteinhoff/Desktop/webapp/blog-starter-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/evansteinhoff/Desktop/webapp/blog-starter-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from\"react\";import Nav from\"./Nav\";import Article from\"./Article\";import ArticleEntry from\"./ArticleEntry\";import{fetchArticles,createArticle}from\"../services/articleService\";import{SignIn,SignOut,useAuthentication}from\"../services/authService\";import\"./App.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),articles=_useState2[0],setArticles=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),article=_useState4[0],setArticle=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),writing=_useState6[0],setWriting=_useState6[1];var user=useAuthentication();// This is a trivial app, so just fetch all the articles once, when\n// the app is loaded. A real app would do pagination. Note that\n// \"fetchArticles\" is what gets the articles from the service and\n// then \"setArticles\" writes them into the React state.\nuseEffect(function(){fetchArticles().then(setArticles);},[]);// Update the \"database\" *then* update the internal React state. These\n// two steps are definitely necessary.\nfunction addArticle(_ref){var title=_ref.title,body=_ref.body;createArticle({title:title,body:body}).then(function(article){setArticle(article);setArticles([article].concat(_toConsumableArray(articles)));setWriting(false);});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{children:[\"Blog\",user&&/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return setWriting(true);},children:\"New Article\"}),!user?/*#__PURE__*/_jsx(SignIn,{}):/*#__PURE__*/_jsx(SignOut,{})]}),!user?\"\":/*#__PURE__*/_jsx(Nav,{articles:articles,setArticle:setArticle}),!user?\"\":writing?/*#__PURE__*/_jsx(ArticleEntry,{addArticle:addArticle}):/*#__PURE__*/_jsx(Article,{article:article})]});}","map":{"version":3,"names":["useEffect","useState","Nav","Article","ArticleEntry","fetchArticles","createArticle","SignIn","SignOut","useAuthentication","App","articles","setArticles","article","setArticle","writing","setWriting","user","then","addArticle","title","body"],"sources":["/Users/evansteinhoff/Desktop/webapp/blog-starter-app/src/components/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Nav from \"./Nav\";\nimport Article from \"./Article\";\nimport ArticleEntry from \"./ArticleEntry\";\nimport { fetchArticles, createArticle } from \"../services/articleService\";\nimport { SignIn, SignOut, useAuthentication } from \"../services/authService\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [articles, setArticles] = useState([]);\n  const [article, setArticle] = useState(null);\n  const [writing, setWriting] = useState(null);\n  const user = useAuthentication();\n\n  // This is a trivial app, so just fetch all the articles once, when\n  // the app is loaded. A real app would do pagination. Note that\n  // \"fetchArticles\" is what gets the articles from the service and\n  // then \"setArticles\" writes them into the React state.\n  useEffect(() => {\n    fetchArticles().then(setArticles);\n  }, []);\n\n  // Update the \"database\" *then* update the internal React state. These\n  // two steps are definitely necessary.\n  function addArticle({ title, body }) {\n    createArticle({ title, body }).then((article) => {\n      setArticle(article);\n      setArticles([article, ...articles]);\n      setWriting(false);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        Blog\n        {user && <button onClick={() => setWriting(true)}>New Article</button>}\n        {!user ? <SignIn /> : <SignOut />}\n      </header>\n\n      {!user ? \"\" : <Nav articles={articles} setArticle={setArticle} />}\n\n      {!user ? (\n        \"\"\n      ) : writing ? (\n        <ArticleEntry addArticle={addArticle} />\n      ) : (\n        <Article article={article} />\n      )}\n    </div>\n  )\n}\n"],"mappings":"4RAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAOC,IAAG,KAAM,OAAO,CACvB,MAAOC,QAAO,KAAM,WAAW,CAC/B,MAAOC,aAAY,KAAM,gBAAgB,CACzC,OAASC,aAAa,CAAEC,aAAa,KAAQ,4BAA4B,CACzE,OAASC,MAAM,CAAEC,OAAO,CAAEC,iBAAiB,KAAQ,yBAAyB,CAC5E,MAAO,WAAW,CAAC,wFAEnB,cAAe,SAASC,IAAG,EAAG,CAC5B,cAAgCT,QAAQ,CAAC,EAAE,CAAC,wCAArCU,QAAQ,eAAEC,WAAW,eAC5B,eAA8BX,QAAQ,CAAC,IAAI,CAAC,yCAArCY,OAAO,eAAEC,UAAU,eAC1B,eAA8Bb,QAAQ,CAAC,IAAI,CAAC,yCAArCc,OAAO,eAAEC,UAAU,eAC1B,GAAMC,KAAI,CAAGR,iBAAiB,EAAE,CAEhC;AACA;AACA;AACA;AACAT,SAAS,CAAC,UAAM,CACdK,aAAa,EAAE,CAACa,IAAI,CAACN,WAAW,CAAC,CACnC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA;AACA,QAASO,WAAU,MAAkB,IAAfC,MAAK,MAALA,KAAK,CAAEC,IAAI,MAAJA,IAAI,CAC/Bf,aAAa,CAAC,CAAEc,KAAK,CAALA,KAAK,CAAEC,IAAI,CAAJA,IAAK,CAAC,CAAC,CAACH,IAAI,CAAC,SAACL,OAAO,CAAK,CAC/CC,UAAU,CAACD,OAAO,CAAC,CACnBD,WAAW,EAAEC,OAAO,4BAAKF,QAAQ,GAAE,CACnCK,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CACJ,CAEA,mBACE,aAAK,SAAS,CAAC,KAAK,wBAClB,iCAEGC,IAAI,eAAI,eAAQ,OAAO,CAAE,yBAAMD,WAAU,CAAC,IAAI,CAAC,EAAC,yBAAqB,CACrE,CAACC,IAAI,cAAG,KAAC,MAAM,IAAG,cAAG,KAAC,OAAO,IAAG,GAC1B,CAER,CAACA,IAAI,CAAG,EAAE,cAAG,KAAC,GAAG,EAAC,QAAQ,CAAEN,QAAS,CAAC,UAAU,CAAEG,UAAW,EAAG,CAEhE,CAACG,IAAI,CACJ,EAAE,CACAF,OAAO,cACT,KAAC,YAAY,EAAC,UAAU,CAAEI,UAAW,EAAG,cAExC,KAAC,OAAO,EAAC,OAAO,CAAEN,OAAQ,EAC3B,GACG,CAEV"},"metadata":{},"sourceType":"module"}