{"ast":null,"code":"// This service completely hides the data store from the rest of the app.\n// No other part of the app knows how the data is stored. If anyone wants\n// to read or write data, they have to go through this service.\n\n// For this starter code, we use mock data, that is, data in memory that\n// is pretty arbitrary. The service functions to create and fetch articles\n// will just work on this fake data in memory.\n\n// This intent is for you to fork this starter code and then replace the\n// bodies of the service functions with code that fetches from a *real*\n// database like Firebase Firestore.\n\nconst articles = {\n  sdkjfhshfskdlshjf: {\n    date: new Date(2021, 2, 16),\n    title: \"There’s a fair tomorrow\",\n    body: [\"Is a mháithrín an ligfidh tú chun aonaigh mé\", \"Is a mhuirnín óg ná healaí é\", \"Beidh aonach amárach in gContae an Chláir\", \"Cén mhaith domh é ní bheidh mé ann`\"].join(\"\\n\")\n  },\n  asjkdhalfkjsdjfhsd: {\n    date: new Date(2021, 9, 24),\n    title: \"Hello Everyone\",\n    body: \"It is a good day to learn React and Firebase\\n\".repeat(10)\n  }\n};\nexport async function createArticle(_ref) {\n  let {\n    title,\n    body\n  } = _ref;\n  // As this is just fake data for messing around, we'll throw in a quick\n  // and unreliable database id. In a real app, the id should be generated\n  // by the database itself (or you can use UUIDs).\n  return {\n    id: Math.random(),\n    title,\n    body,\n    date: new Date()\n  };\n}\nexport async function fetchArticles() {\n  // In storage the ids are separated from the data, but in this function\n  // we are going to combine the id and the data together.\n  return Object.entries(articles).map(_ref2 => {\n    let [id, data] = _ref2;\n    return {\n      id,\n      ...data\n    };\n  });\n}","map":{"version":3,"names":["articles","sdkjfhshfskdlshjf","date","Date","title","body","join","asjkdhalfkjsdjfhsd","repeat","createArticle","id","Math","random","fetchArticles","Object","entries","map","data"],"sources":["/Users/evansteinhoff/Desktop/webapp/blog-starter-app/src/services/articleService.js"],"sourcesContent":["// This service completely hides the data store from the rest of the app.\n// No other part of the app knows how the data is stored. If anyone wants\n// to read or write data, they have to go through this service.\n\n// For this starter code, we use mock data, that is, data in memory that\n// is pretty arbitrary. The service functions to create and fetch articles\n// will just work on this fake data in memory.\n\n// This intent is for you to fork this starter code and then replace the\n// bodies of the service functions with code that fetches from a *real*\n// database like Firebase Firestore.\n\nconst articles = {\n  sdkjfhshfskdlshjf: {\n    date: new Date(2021, 2, 16),\n    title: \"There’s a fair tomorrow\",\n    body: [\n      \"Is a mháithrín an ligfidh tú chun aonaigh mé\",\n      \"Is a mhuirnín óg ná healaí é\",\n      \"Beidh aonach amárach in gContae an Chláir\",\n      \"Cén mhaith domh é ní bheidh mé ann`\",\n    ].join(\"\\n\"),\n  },\n  asjkdhalfkjsdjfhsd: {\n    date: new Date(2021, 9, 24),\n    title: \"Hello Everyone\",\n    body: \"It is a good day to learn React and Firebase\\n\".repeat(10),\n  },\n};\n\nexport async function createArticle({ title, body }) {\n  // As this is just fake data for messing around, we'll throw in a quick\n  // and unreliable database id. In a real app, the id should be generated\n  // by the database itself (or you can use UUIDs).\n  return { id: Math.random(), title, body, date: new Date() };\n}\n\nexport async function fetchArticles() {\n  // In storage the ids are separated from the data, but in this function\n  // we are going to combine the id and the data together.\n  return Object.entries(articles).map(([id, data]) => ({ id, ...data }));\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAG;EACfC,iBAAiB,EAAE;IACjBC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3BC,KAAK,EAAE,yBAAyB;IAChCC,IAAI,EAAE,CACJ,8CAA8C,EAC9C,8BAA8B,EAC9B,2CAA2C,EAC3C,qCAAqC,CACtC,CAACC,IAAI,CAAC,IAAI;EACb,CAAC;EACDC,kBAAkB,EAAE;IAClBL,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3BC,KAAK,EAAE,gBAAgB;IACvBC,IAAI,EAAE,gDAAgD,CAACG,MAAM,CAAC,EAAE;EAClE;AACF,CAAC;AAED,OAAO,eAAeC,aAAa,OAAkB;EAAA,IAAjB;IAAEL,KAAK;IAAEC;EAAK,CAAC;EACjD;EACA;EACA;EACA,OAAO;IAAEK,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE;IAAER,KAAK;IAAEC,IAAI;IAAEH,IAAI,EAAE,IAAIC,IAAI;EAAG,CAAC;AAC7D;AAEA,OAAO,eAAeU,aAAa,GAAG;EACpC;EACA;EACA,OAAOC,MAAM,CAACC,OAAO,CAACf,QAAQ,CAAC,CAACgB,GAAG,CAAC;IAAA,IAAC,CAACN,EAAE,EAAEO,IAAI,CAAC;IAAA,OAAM;MAAEP,EAAE;MAAE,GAAGO;IAAK,CAAC;EAAA,CAAC,CAAC;AACxE"},"metadata":{},"sourceType":"module"}